{"version":3,"sources":["data/seed.js","BlogPost.js","Blog.js","serviceWorker.js","index.js"],"names":["generateVoteCount","Math","floor","random","posts","id","title","description","url","votes","submitterAvatarUrl","imageUrl","BlogPost","handleUpVote","props","onVote","post","this","className","alt","src","href","onClick","React","Component","Blog","handlePostUpVote","postId","newPost","updatedPostsList","state","blogPosts","map","Object","create","setState","postComponents","sort","a","b","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAAMA,G,KAAqB,WACvB,OAAOC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,MAGrCC,EAAQ,CACZ,CACEC,GAAI,EACJC,MAAO,cACPC,YAAa,iIACbC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,4BACpBC,SAAU,+BAEZ,CACEN,GAAI,EACJC,MAAO,gBACPC,YAAa,uPACbC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,8BACpBC,SAAU,mCAEZ,CACEN,GAAI,EACJC,MAAO,mCACPC,YAAa,qEACbC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,8BACpBC,SAAU,2BAEZ,CACEN,GAAI,EACJC,MAAO,mBACPC,YAAa,wIACbC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,2BACpBC,SAAU,mCCEDC,E,2MApCbC,aAAe,WACb,EAAKC,MAAMC,OAAO,EAAKD,MAAME,KAAKX,K,wEAGzB,IAAD,EAC+DY,KAAKH,MAAME,KAA3EL,EADC,EACDA,SAAUH,EADT,EACSA,IAAKF,EADd,EACcA,MAAOC,EADrB,EACqBA,YAAaG,EADlC,EACkCA,mBAAoBD,EADtD,EACsDA,MAC9D,OACE,yBAAKS,UAAU,QAEb,yBAAKA,UAAU,SACb,yBAAKC,IAAI,iBAAiBC,IAAKT,KAGjC,yBAAKO,UAAU,0BACb,yBAAKA,UAAU,UACb,uBAAGG,KAAMb,GAAMF,IAEjB,yBAAKY,UAAU,eACb,2BAAIX,IAEN,yBAAKW,UAAU,SACb,gDACA,yBAAKC,IAAK,iBAAiBC,IAAKV,EAAoBQ,UAAU,oBAC9D,uBAAGI,QAASL,KAAKJ,cACf,uBAAGK,UAAU,yBAEdT,S,GA5BUc,IAAMC,WC4CdC,E,YAvCb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAQRY,iBAAmB,SAAAC,GAGjB,IAAIC,EAAU,KACVC,EAAmB,EAAKC,MAAMC,UAAUC,KAAK,SAAChB,GAChD,OAAIA,EAAKX,KAAOsB,IACdC,EAAUK,OAAOC,OAAOlB,IAChBP,OAAS,EACVmB,GAEAZ,KAGX,EAAKmB,SAAS,CAAEJ,UAAWF,KApB3B,EAAKC,MAAS,CAAEC,UAAW,IAFV,E,iFAMjBd,KAAKkB,SAAU,CAAEJ,UAAW3B,M,+BAmBpB,IAAD,OACDgC,EAAkBnB,KAAKa,MAAMC,UAAUM,MAAM,SAACC,EAAEC,GAAH,OAAUD,EAAE7B,MAAM8B,EAAE9B,SAAQuB,KAAK,SAAChB,GAAD,OAClF,kBAAC,EAAD,CAAUwB,IAAKxB,EAAKX,GAAIW,KAAMA,EAAMD,OAAQ,EAAKW,sBAGnD,OACE,yBAAKR,UAAU,wBACZkB,O,GAlCUb,IAAMC,WCMLiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f52355d5.chunk.js","sourcesContent":["const generateVoteCount =  () =>  {\n    return Math.floor((Math.random() * 50) + 15);\n  }\n\n  const posts = [\n    {\n      id: 1,\n      title: 'AWS Fargate',\n      description: 'AWS Fargate is a compute engine for Amazon ECS that allows you to run containers without having to manage servers or clusters.',\n      url: '#',\n      votes: generateVoteCount(),\n      submitterAvatarUrl: 'images/avatars/daniel.jpg',\n      imageUrl: 'images/products/fargate.png',\n    },\n    {\n      id: 2,\n      title: 'AWS Robomaker',\n      description: 'Robots are being used more widely in society for purposes that are increasing in sophistication such as complex assembly, environmental monitoring, search and rescue, cleaning, companionship, assisted surgery, picking and packing, and delivery.',\n      url: '#',\n      votes: generateVoteCount(),\n      submitterAvatarUrl: './images/avatars/kristy.png',\n      imageUrl: './images/products/robomaker.png',\n    },\n    {\n      id: 3,\n      title: 'Amazon EC2 High Memory Instances',\n      description: 'Today we are launching instances with 18 TiB and 24 TiB of memory.' ,\n      url: '#',\n      votes: generateVoteCount(),\n      submitterAvatarUrl: 'images/avatars/veronika.jpg',\n      imageUrl: 'images/products/ec2.png',\n    },\n    {\n      id: 4,\n      title: 'Amazon Sagemaker',\n      description: 'You can use Amazon SageMaker to easily train deep learning models on Amazon EC2 P3 instances, the fastest GPU instances in the cloud.' ,\n      url: '#',\n      votes: generateVoteCount(),\n      submitterAvatarUrl: 'images/avatars/molly.png',\n      imageUrl: 'images/products/sagemaker.jpeg',\n    }\n  ];\n\n  export { generateVoteCount, posts }\n","import React from 'react';\nimport './css/App.css';\n\nclass BlogPost extends React.Component {\n\n  handleUpVote = () =>  {\n    this.props.onVote(this.props.post.id);\n  }\n\n  render () {\n    const {imageUrl, url, title, description, submitterAvatarUrl, votes} = this.props.post;\n    return (\n      <div className=\"item\">\n\n        <div className=\"image\">\n          <img alt=\"Main blog post\" src={imageUrl} />\n        </div>\n \n        <div className=\"middle aligned content\">\n          <div className=\"header\">\n            <a href={url}>{title}</a>\n          </div>\n          <div className=\"description\">\n            <p>{description}</p>\n          </div>\n          <div className=\"extra\">\n            <span>Submitted by: </span>\n            <img alt= \"posters avatar\" src={submitterAvatarUrl} className=\"ui avatar image\" />\n            <a onClick={this.handleUpVote}>\n              <i className=\"large caret up icon\" />\n            </a>\n            {votes}\n          </div>\n\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default BlogPost;","import React from 'react';\n// import logo from './logo.svg';\nimport './css/App.css';\nimport { posts } from './data/seed.js';\nimport BlogPost from './BlogPost';\n\nclass Blog extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state  = { blogPosts: []};\n  }\n\n  componentDidMount() {\n    this.setState( { blogPosts: posts} );\n  }\n\n  handlePostUpVote = postId => {\n    // console.log('handlePostUpVote post id: ', postId, 'current votes: ', this.state.posts[postId].votes);\n\n    let newPost = null;\n    let updatedPostsList = this.state.blogPosts.map( (post) => {              //find selected blog post id\n      if (post.id === postId) {\n        newPost = Object.create(post);\n        newPost.votes += 1;\n        return newPost;\n      } else {\n        return post;\n      } \n    });\n    this.setState({ blogPosts: updatedPostsList});\n  }\n\n  render() {\n    const postComponents =  this.state.blogPosts.sort( (a,b) => (a.votes-b.votes)).map( (post) =>       //sort in order of ascending # of votes\n      <BlogPost key={post.id} post={post} onVote={this.handlePostUpVote} />  \n    );\n\n    return (\n      <div className='ui unstackable items'>\n        {postComponents}    \n      </div>\n    );\n  } //end render\n\n}\n\nexport default Blog;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport Blog from './Blog';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Blog />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}